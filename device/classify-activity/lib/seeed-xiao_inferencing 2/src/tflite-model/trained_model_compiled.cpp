/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 22.03.2022 19:24:16

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 416;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[11];
TfLiteEvalTensor tflEvalTensors[11];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[4];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,33 } };
const ALIGN(8) float tensor_data1[2] = { 0.015599531121551991, -0.015599531121551991, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(16) float tensor_data2[10] = { 0, -0.0079664001241326332, 0.01313205249607563, -0.014920517802238464, 0.0019754585810005665, -0.015897920355200768, -0.010429278947412968, 0.015700692310929298, -0.015288523398339748, 0.015739547088742256, };
const TfArray<1, int> tensor_dimension2 = { 1, { 10 } };
const ALIGN(16) float tensor_data3[20] = { 0, -0.0152167659252882, 0.01478428952395916, 0.013948468491435051, 0.016603438183665276, -0.0072557483799755573, -0.011447413824498653, 0, -0.0046159112825989723, 0.017817800864577293, 0.016752725467085838, -0.015754858031868935, -0.0021911030635237694, -0.016126669943332672, 0.017359336838126183, -0.014726545661687851, -0.00686307018622756, 0.0082994569092988968, 0.017545251175761223, 0, };
const TfArray<1, int> tensor_dimension3 = { 1, { 20 } };
const ALIGN(16) float tensor_data4[20*33] = { 
  -0.24651779234409332, -0.23075369000434875, -0.20029939711093903, 0.040320843458175659, -0.054945021867752075, 0.028506726026535034, -0.28172516822814941, -0.24265500903129578, -0.2660541832447052, 0.049587041139602661, 0.30065765976905823, -0.16554751992225647, -0.22671875357627869, 0.29220643639564514, 0.13684064149856567, 0.32521608471870422, 0.30233070254325867, -0.10686773061752319, 0.22656747698783875, -0.21347129344940186, 0.28668591380119324, -0.30074477195739746, 0.31060442328453064, -0.24272191524505615, -0.19228711724281311, -0.19396489858627319, -0.3025708794593811, 0.13547980785369873, -0.12906226515769958, -0.11683471500873566, -0.21019153296947479, -0.29461908340454102, 0.063727647066116333, 
  0.031478561460971832, 0.060287065804004669, -0.010088647715747356, -0.14143764972686768, 0.053182777017354965, 0.2970518171787262, 0.19761434197425842, 0.26275694370269775, -0.28056943416595459, 0.20463241636753082, 0.16238243877887726, -0.17153836786746979, -0.084052301943302155, -0.29615452885627747, -0.2030281126499176, -0.14771328866481781, -0.13815073668956757, -0.29041957855224609, 0.21496608853340149, 0.13497453927993774, -0.036522746086120605, -0.19231711328029633, -0.27930063009262085, -0.20218230783939362, 0.090700961649417877, -0.20283342897891998, 0.071796596050262451, 0.14266160130500793, -0.18977472186088562, 0.003755942452698946, 0.25089624524116516, 0.28877341747283936, -0.33390891551971436, 
  0.012153736315667629, -0.31262189149856567, -0.24749742448329926, 0.15264475345611572, 0.012773559428751469, 0.090179719030857086, -0.30178523063659668, -0.062121588736772537, -0.19251185655593872, 0.047832868993282318, -0.097704283893108368, -0.066346272826194763, -0.23032334446907043, -0.057880491018295288, 0.19095389544963837, -0.26429656147956848, -0.21297475695610046, -0.063801757991313934, 0.29146015644073486, -0.30446469783782959, 0.2388947606086731, -0.031952559947967529, -0.15191982686519623, 0.080271638929843903, -0.13378527760505676, 0.29159855842590332, 0.048726409673690796, -0.15936233103275299, -0.0417201928794384, -0.18504869937896729, -0.20250621438026428, 0.26339215040206909, -0.27496027946472168, 
  -0.30981510877609253, -0.075736634433269501, -0.24918827414512634, 0.15233954787254333, 0.10128434747457504, 0.088619321584701538, -0.23056311905384064, 0.067725241184234619, 0.06706596165895462, 0.30069282650947571, 0.016633706167340279, -0.27380675077438354, 0.067296512424945831, 0.16306543350219727, 0.042891804128885269, -0.15819358825683594, -0.074321508407592773, -0.061197444796562195, 0.32714760303497314, 0.20937667787075043, -0.31619739532470703, -0.19274052977561951, 0.34620669484138489, -0.015289470553398132, -0.034289225935935974, 0.31740710139274597, 0.038334906101226807, -0.10086268931627274, 0.26791960000991821, 0.07165120542049408, 0.008901422843337059, 0.25063842535018921, 0.038318619132041931, 
  0.019759152084589005, 0.20347185432910919, -0.18335889279842377, 0.22492508590221405, 0.1215813010931015, 0.31460770964622498, -0.23763762414455414, -0.11290760338306427, 0.079736270010471344, 0.11874116212129593, 0.12627203762531281, 0.028234269469976425, -0.0051942579448223114, -0.052484035491943359, -0.26671701669692993, 0.00019568201969377697, -0.14642871916294098, -0.1313919872045517, 0.092741690576076508, 0.07807525247335434, 0.070511363446712494, -0.11818051338195801, -0.11130224168300629, 0.091499529778957367, -0.019866300746798515, -0.13486003875732422, 0.30519896745681763, 0.15019083023071289, 0.32026326656341553, 0.01305996160954237, 0.037123620510101318, -0.16037294268608093, -0.14892226457595825, 
  0.15791243314743042, -0.19548848271369934, -0.07112913578748703, -0.062144286930561066, -0.011881379410624504, 0.13776746392250061, 0.096936888992786407, 0.097548678517341614, -0.019688624888658524, -0.28559350967407227, -0.17061078548431396, -0.21470603346824646, 0.29705905914306641, -0.16576704382896423, 0.2354903519153595, 0.058842301368713379, -0.1798604279756546, 0.11432381719350815, 0.2175346165895462, 0.27325573563575745, -0.17482820153236389, -0.32426032423973083, -0.069836750626564026, -0.11154260486364365, -0.23008759319782257, 0.14842827618122101, 0.042278684675693512, -0.13410738110542297, 0.17156161367893219, 0.10451489686965942, 0.14840058982372284, 0.31491917371749878, 0.0045312335714697838, 
  -0.26033234596252441, 0.28832834959030151, -0.0534103624522686, -0.13245302438735962, -0.13803143799304962, 0.091992683708667755, 0.091652087867259979, -0.087117396295070648, -0.16681836545467377, 0.16704456508159637, -0.28781279921531677, -0.26289314031600952, -0.34204542636871338, -0.24734558165073395, 0.27695810794830322, 0.068761512637138367, -0.080766543745994568, 0.14673537015914917, 0.079373389482498169, -0.12865224480628967, 0.050931259989738464, -0.052139941602945328, 0.29532188177108765, -0.26246336102485657, 0.073059961199760437, -0.0047842981293797493, -0.17469944059848785, 0.043246157467365265, 0.07174208015203476, -0.10301709175109863, 0.13576312363147736, -0.10746878385543823, -0.21937957406044006, 
  -0.11061909794807434, 0.32367536425590515, -0.22446572780609131, -0.077373087406158447, -0.27365455031394958, 0.3066079318523407, 0.048475772142410278, -0.30905058979988098, 0.26549717783927917, -0.25921630859375, 0.2093949019908905, -0.17951487004756927, -0.23982013761997223, -0.14562815427780151, -0.18434189260005951, -0.034447759389877319, -0.0062663257122039795, -0.26253122091293335, 0.019424885511398315, -0.093843594193458557, -0.10313120484352112, -0.26380893588066101, -0.31980669498443604, -0.065942674875259399, -0.052843064069747925, -0.28885704278945923, 0.23124811053276062, 0.1017414927482605, 0.12115040421485901, 0.23151704668998718, -0.29385244846343994, 0.27848431468009949, -0.29307007789611816, 
  0.094283148646354675, 0.12995085120201111, 0.11484580487012863, -0.32599720358848572, 0.19934336841106415, 0.14507248997688293, -0.1125035434961319, -0.071124523878097534, 0.13164755702018738, -0.26899155974388123, -0.33441561460494995, 0.30577456951141357, 0.018853448331356049, -0.13823311030864716, -0.34241741895675659, -0.21456725895404816, 0.050092346966266632, -0.064519993960857391, 0.23152880370616913, -0.010993109084665775, -0.049899697303771973, -0.10354345291852951, -0.070627763867378235, -0.18241822719573975, -0.15023519098758698, 0.28754127025604248, -0.29467791318893433, 0.068143799901008606, 0.25526785850524902, -0.012989746406674385, -0.12517061829566956, 0.11442573368549347, -0.15352447330951691, 
  0.0016673884820193052, 0.081762485206127167, 0.048174608498811722, 0.17991785705089569, -0.27215227484703064, -0.0017289919778704643, -0.012982387095689774, -0.10839074105024338, 0.18559467792510986, -0.041951265186071396, 0.027845008298754692, -0.089086525142192841, -0.14162442088127136, 0.0035847809631377459, 0.044081445783376694, -0.1239985004067421, 0.10619606077671051, 0.311258465051651, 0.28909900784492493, -0.25069347023963928, 0.22777332365512848, -0.19275781512260437, -0.0065492759458720684, 0.29645028710365295, 0.27207827568054199, -0.22944515943527222, -0.096208080649375916, -0.19272628426551819, 0.30604198575019836, 0.20788590610027313, -0.24051642417907715, 0.1181006133556366, 0.0070745754055678844, 
  -0.25021713972091675, -0.25909620523452759, -0.30001452565193176, -0.23317842185497284, 0.33030930161476135, -0.096501372754573822, 0.12294528633356094, 0.0064805406145751476, 0.062762647867202759, 0.24063801765441895, 0.04079003632068634, 0.29971027374267578, 0.079397127032279968, 0.29661688208580017, -0.021809488534927368, -0.22854338586330414, -0.19329813122749329, 0.21764124929904938, -0.085486613214015961, -0.0178191177546978, -0.16382543742656708, 0.034093279391527176, 0.22669634222984314, -0.28317606449127197, -0.12810571491718292, 0.12234398722648621, -0.22441259026527405, 0.20172932744026184, 0.13195487856864929, -0.25818848609924316, 0.33539238572120667, -0.041465185582637787, -0.29218092560768127, 
  0.26099410653114319, 0.16584080457687378, -0.030501201748847961, -0.074523791670799255, 0.01955881342291832, 0.31041261553764343, 0.069416642189025879, 0.21654418110847473, 0.2405247837305069, 0.29594302177429199, -0.087398089468479156, 0.25827816128730774, 0.026295961812138557, -0.24098208546638489, -0.21577127277851105, 0.12968362867832184, 0.030568350106477737, 0.17748069763183594, 0.23962189257144928, 0.22661043703556061, 0.15017059445381165, -0.14503760635852814, -0.028291923925280571, 0.061512764543294907, 0.21720728278160095, -0.2474503219127655, -0.085273221135139465, 0.25002971291542053, -0.22410453855991364, 0.18641588091850281, -0.306966632604599, 0.11569487303495407, -0.23480276763439178, 
  0.11525225639343262, 0.22305944561958313, 0.046976249665021896, -0.19459100067615509, 0.24732457101345062, -0.10774645954370499, 0.087660372257232666, -0.15573854744434357, -0.058086719363927841, 0.29777860641479492, -0.034165676683187485, -0.17354680597782135, -0.24158728122711182, 0.26520165801048279, 0.28636214137077332, -0.32410278916358948, 0.16211913526058197, -0.022427273914217949, -0.32789301872253418, -0.081055745482444763, -0.31992661952972412, -0.077854558825492859, 0.28767824172973633, -0.057904832065105438, -0.28727060556411743, -0.042848750948905945, -0.25447219610214233, 0.093925826251506805, 0.25469094514846802, -0.15038178861141205, 0.2102554589509964, -0.12133652716875076, -0.11598893254995346, 
  0.020338801667094231, 0.064690284430980682, -0.11258877813816071, 0.20669311285018921, 0.026668597012758255, -0.096092619001865387, 0.14795219898223877, -0.082045167684555054, 0.085090674459934235, 0.23297335207462311, 0.30640256404876709, 0.27413007616996765, 0.14386284351348877, -0.1535370945930481, -0.00212621851824224, 0.057349849492311478, -0.21046163141727448, -0.18649956583976746, 0.073907196521759033, 0.25297024846076965, -0.33949640393257141, -0.13897699117660522, 0.12222908437252045, -0.14668628573417664, -0.34410116076469421, 0.24981041252613068, 0.16816814243793488, 0.04400157555937767, 0.27275311946868896, -0.16408824920654297, -0.34491604566574097, 0.32043007016181946, 0.08003244549036026, 
  -0.17947696149349213, -0.31395617127418518, 0.34797564148902893, -0.14126959443092346, 0.17409120500087738, -0.099112652242183685, 0.183414027094841, 0.2229570746421814, 0.049140818417072296, -0.10539047420024872, -0.26372608542442322, -0.039522197097539902, -0.25581139326095581, -0.071502901613712311, 0.050546310842037201, -0.035637129098176956, -0.1624971330165863, -0.13581006228923798, -0.12327732145786285, -0.17601083219051361, 0.08937361091375351, 0.1561657041311264, -0.17414392530918121, 0.13815611600875854, 0.20738831162452698, 0.030593568459153175, -0.22929015755653381, -0.030786527320742607, -0.12321504205465317, 0.037575285881757736, 0.068791300058364868, 0.0074282726272940636, 0.25562331080436707, 
  -0.21959409117698669, 0.30455026030540466, -0.11750899255275726, 0.099845349788665771, -0.09628266841173172, 0.28939869999885559, -0.20063792169094086, -0.17838564515113831, -0.060477897524833679, 0.2533704936504364, -0.21014466881752014, 0.1383918821811676, -0.14805221557617188, -0.10912186652421951, 0.31376561522483826, -0.26713880896568298, -0.041231047362089157, 0.2134118378162384, 0.19105899333953857, 0.21426253020763397, 0.063529476523399353, -0.16157512366771698, 0.0666704922914505, -0.28191855549812317, -0.16540907323360443, -0.11210015416145325, 0.18816500902175903, 0.10929465293884277, 0.019185170531272888, 0.015895834192633629, -0.32213160395622253, -0.2858060896396637, -0.30667689442634583, 
  -0.2631504237651825, 0.27650126814842224, 0.18499675393104553, 0.045268014073371887, -0.024928340688347816, -0.010634507983922958, -0.045116323977708817, -0.17168426513671875, -0.05363265797495842, 0.089578069746494293, -0.00044966442510485649, -0.28315445780754089, -0.19652250409126282, -0.31167718768119812, -0.22641883790493011, 0.14593510329723358, 0.2196226567029953, 0.15016891062259674, -0.29144483804702759, -0.053321093320846558, -0.17055679857730865, -0.31447494029998779, -0.16453805565834045, 0.24297051131725311, 0.1929345577955246, 0.11665221303701401, -0.086104415357112885, 0.027525084093213081, 0.32075446844100952, 0.29588422179222107, 0.0098677277565002441, -0.074298158288002014, -0.04417874664068222, 
  -0.13083530962467194, 0.029732204973697662, -0.29903164505958557, -0.27163457870483398, 0.3051055371761322, -0.12586744129657745, 0.072930827736854553, 0.22987373173236847, -0.18907317519187927, 0.043928772211074829, 0.045853421092033386, 0.15195953845977783, 0.084974616765975952, -0.094823993742465973, -0.039450149983167648, -0.10100036859512329, 0.020319782197475433, -0.055535189807415009, -0.17884907126426697, 0.2639424204826355, -0.29349321126937866, -0.08052690327167511, 0.19496548175811768, -0.25971409678459167, 0.29605892300605774, -0.032402694225311279, -0.22891516983509064, 0.31837522983551025, 0.20800696313381195, 0.16074332594871521, 0.18989081680774689, 0.063396871089935303, 0.076332956552505493, 
  -0.20723728835582733, -0.053064696490764618, 0.28456142544746399, 0.30770105123519897, 0.21786969900131226, 0.1431543380022049, 0.0085647013038396835, -0.20859616994857788, -0.072958625853061676, -0.066772788763046265, -0.26607346534729004, -0.20665262639522552, 0.26394090056419373, -0.015874557197093964, -0.12756903469562531, 0.24800829589366913, -0.11458790302276611, -0.039435725659132004, -0.25869324803352356, -0.038252811878919601, 0.22630128264427185, -0.27185779809951782, -0.082435406744480133, 0.34398430585861206, -0.19504414498806, -0.26179003715515137, 0.26646003127098083, -0.072760216891765594, 0.080515198409557343, -0.003277177456766367, 0.20262028276920319, 0.14400210976600647, 0.28874322772026062, 
  -0.095880761742591858, 0.15167883038520813, 0.22957214713096619, 0.1573619544506073, 0.069196760654449463, -0.010352909564971924, 0.0042296350002288818, -0.2854498028755188, 0.29453638195991516, 0.30150589346885681, -0.079767942428588867, 0.25371536612510681, -0.021364748477935791, -0.098043143749237061, 0.27663519978523254, 0.10880565643310547, 0.076650708913803101, -0.30972081422805786, 0.094955027103424072, -0.047840744256973267, -0.10153724253177643, 0.18790027499198914, 0.28918001055717468, -0.29203468561172485, 0.22617301344871521, 0.31076624989509583, -0.0063852667808532715, 0.30883517861366272, -0.29498898983001709, -0.32846915721893311, -0.31533285975456238, -0.23680943250656128, 0.33614537119865417, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 20,33 } };
const ALIGN(16) float tensor_data5[10*20] = { 
  -0.27318322658538818, -0.014016687870025635, 0.12290698289871216, 0.074745476245880127, 0.3609311580657959, -0.26030060648918152, -0.11589732766151428, 0.075009346008300781, -0.36281353235244751, -0.39379656314849854, -0.13624599575996399, -0.23898240923881531, 0.38719195127487183, 0.34937173128128052, -0.12032896280288696, 0.0040909647941589355, -0.37547299265861511, 0.060225605964660645, -0.12740728259086609, 0.05368572473526001, 
  -0.28059786558151245, 0.059417326003313065, -0.22986795008182526, 0.16483400762081146, 0.09062262624502182, 0.037616819143295288, 0.28846579790115356, -0.18902638554573059, -0.1638609766960144, -0.31616204977035522, 0.065396249294281006, -0.34398114681243896, -0.11056725680828094, -0.14376388490200043, -0.34283196926116943, -0.3712192177772522, -0.18867947161197662, 0.2811187207698822, 0.20439153909683228, -0.36843103170394897, 
  -0.33629399538040161, 0.30179229378700256, 0.089299269020557404, -0.21885755658149719, 0.29155129194259644, -0.005891481414437294, 0.19397303462028503, -0.18976423144340515, 0.33200624585151672, 0.33597654104232788, -0.24840807914733887, -0.17866663634777069, 0.12762506306171417, -0.41077664494514465, 0.15252436697483063, -0.13986620306968689, -0.11019361019134521, 0.42264389991760254, -0.37554803490638733, -0.12437179684638977, 
  -0.28346842527389526, -0.091061174869537354, -0.27542999386787415, -0.35783469676971436, -0.079238124191761017, 0.19088925421237946, 0.26263624429702759, 0.32460159063339233, 0.36899420619010925, -0.33495616912841797, 0.32530161738395691, 0.15112939476966858, -0.0012998025631532073, -0.28240072727203369, -0.11837327480316162, 0.40979349613189697, 0.080225199460983276, 0.11897513270378113, 0.098710492253303528, -0.28775745630264282, 
  0.064222872257232666, 0.027379788458347321, -0.24630777537822723, -0.32561680674552917, -0.42228272557258606, 0.3697243332862854, -0.15542702376842499, -0.025713235139846802, -0.26297387480735779, 0.41847541928291321, 0.02155064232647419, -0.42005494236946106, -0.3799288272857666, 0.15266714990139008, -0.069755487143993378, 0.081021785736083984, 0.066888004541397095, -0.38459977507591248, 0.41792827844619751, 0.10166460275650024, 
  0.25995397567749023, 0.33388659358024597, -0.35618451237678528, 0.022313369438052177, -0.31433376669883728, -0.095770791172981262, 0.001974018756300211, -0.09672313928604126, 0.39845636487007141, -0.42100417613983154, -0.4561278223991394, 0.39180728793144226, -0.33031922578811646, 0.18412412703037262, -0.23486536741256714, 0.32650032639503479, -0.37549701333045959, -0.042849760502576828, -0.38593417406082153, 0.30196404457092285, 
  0.34139341115951538, -0.14322230219841003, 0.039703529328107834, 0.32738208770751953, 0.25682491064071655, -0.12942160665988922, 0.044173788279294968, 0.19964635372161865, 0.18258446455001831, 0.35777786374092102, -0.21841961145401001, 0.24314697086811066, -0.43048533797264099, -0.046739988029003143, -0.038711592555046082, -0.045167740434408188, 0.17003077268600464, -0.10055141150951385, 0.14570583403110504, -0.19546115398406982, 
  -0.23455004394054413, 0.39944538474082947, -0.22488707304000854, -0.39760118722915649, -0.069853790104389191, -0.062764674425125122, -0.11617473512887955, -0.347726970911026, 0.36391273140907288, 0.30348911881446838, 0.28563612699508667, 0.41044092178344727, -0.085487589240074158, -0.006972732488065958, -0.078878879547119141, -0.15326601266860962, -0.25904294848442078, 0.072857528924942017, -0.16338053345680237, 0.19074410200119019, 
  -0.29330170154571533, 0.26504305005073547, 0.016014015302062035, 0.18708892166614532, 0.3822171688079834, -0.020807703956961632, 0.23233626782894135, -0.4124426543712616, -0.10083815455436707, -0.3279472291469574, 0.16707782447338104, 0.30048125982284546, 0.37234613299369812, 0.41228899359703064, -0.087820246815681458, 0.19297938048839569, -0.35199844837188721, 0.38481408357620239, -0.02005474641919136, 0.015677362680435181, 
  -0.11671972274780273, 0.1517309844493866, 0.10535631328821182, 0.34405308961868286, -0.29611355066299438, 0.26177442073822021, 0.31353777647018433, -0.23711861670017242, 0.3176133930683136, -0.13118472695350647, -0.074075780808925629, 0.14487567543983459, -0.37148794531822205, -0.12775793671607971, -0.33057203888893127, 0.10515201091766357, 0.40910202264785767, 0.40397757291793823, -0.12783066928386688, 0.4010164737701416, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 10,20 } };
const ALIGN(16) float tensor_data6[2*10] = { 
  -0.20757019519805908, -0.70079517364501953, -0.060239866375923157, -0.61257737874984741, 0.033820338547229767, -0.45482468605041504, 0.32704311609268188, 0.45334959030151367, 0.01793256402015686, 0.2706950306892395, 
  0.40766626596450806, -0.62737929821014404, -0.067077480256557465, 0.5679391622543335, 0.57550805807113647, 0.36169850826263428, 0.31369262933731079, -0.035057626664638519, 0.15043433010578156, -0.025928286835551262, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 2,10 } };
const TfArray<2, int> tensor_dimension7 = { 2, { 1,20 } };
const TfArray<2, int> tensor_dimension8 = { 2, { 1,10 } };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,2 } };
const TfArray<2, int> tensor_dimension10 = { 2, { 1,2 } };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,4,3 } };
const TfArray<1, int> outputs0 = { 1, { 7 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 7,5,2 } };
const TfArray<1, int> outputs1 = { 1, { 8 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 8,6,1 } };
const TfArray<1, int> outputs2 = { 1, { 9 } };
const TfLiteSoftmaxParams opdata3 = { 1 };
const TfArray<1, int> inputs3 = { 1, { 9 } };
const TfArray<1, int> outputs3 = { 1, { 10 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 132, },
  { kTfLiteMmapRo, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, },
  { kTfLiteMmapRo, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 40, },
  { kTfLiteMmapRo, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 80, },
  { kTfLiteMmapRo, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 2640, },
  { kTfLiteMmapRo, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 800, },
  { kTfLiteMmapRo, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 80, },
  { kTfLiteArenaRw, tensor_arena + 144, (TfLiteIntArray*)&tensor_dimension7, 80, },
  { kTfLiteArenaRw, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension8, 40, },
  { kTfLiteArenaRw, tensor_arena + 48, (TfLiteIntArray*)&tensor_dimension9, 8, },
  { kTfLiteArenaRw, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension10, 8, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers.push_back(ptr);
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    return kTfLiteError;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 11;
  for(size_t i = 0; i < 11; ++i) {
    tflTensors[i].type = kTfLiteFloat32;
    tflEvalTensors[i].type = kTfLiteFloat32;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization.type = kTfLiteNoQuantization;
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for(size_t i = 0; i < 4; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 4; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  10, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 4; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
